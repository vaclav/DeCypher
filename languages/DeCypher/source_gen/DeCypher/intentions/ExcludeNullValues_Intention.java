package DeCypher.intentions;

/*Generated by MPS */

import jetbrains.mps.intentions.BaseIntention;
import jetbrains.mps.intentions.Intention;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.nodeEditor.EditorContext;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;

public class ExcludeNullValues_Intention extends BaseIntention implements Intention {
  public ExcludeNullValues_Intention() {
  }

  public String getConcept() {
    return "DeCypher.structure.PropertyReturnTerm";
  }

  public boolean isParameterized() {
    return false;
  }

  public boolean isErrorIntention() {
    return false;
  }

  public boolean isAvailableInChildNodes() {
    return true;
  }

  public String getDescription(final SNode node, final EditorContext editorContext) {
    return "Exclude Null Values";
  }

  public boolean isApplicable(final SNode node, final EditorContext editorContext) {
    if (!(this.isApplicableToNode(node, editorContext))) {
      return false;
    }
    return true;
  }

  public boolean isApplicableToNode(final SNode node, final EditorContext editorContext) {
    return (int) ListSequence.fromList(SNodeOperations.getAncestors(node, "DeCypher.structure.NonNullReturnTerm", true)).count() == 0;
  }

  public void execute(final SNode node, final EditorContext editorContext) {
    SNode newNode = SConceptOperations.createNewNode("DeCypher.structure.NonNullReturnTerm", null);
    SNodeOperations.replaceWithAnother(node, newNode);
    SLinkOperations.setTarget(newNode, "propertyReturnTerm", node, true);
  }

  public String getLocationString() {
    return "DeCypher.intentions";
  }
}
