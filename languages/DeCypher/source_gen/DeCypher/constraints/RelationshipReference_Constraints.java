package DeCypher.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.SNodePointer;
import java.util.Map;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BaseReferenceConstraintsDescriptor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.runtime.ReferenceScopeProvider;
import jetbrains.mps.smodel.runtime.base.BaseReferenceScopeProvider;
import jetbrains.mps.smodel.IOperationContext;
import jetbrains.mps.smodel.runtime.ReferenceConstraintsContext;
import jetbrains.mps.smodel.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.internal.collections.runtime.ISelector;

public class RelationshipReference_Constraints extends BaseConstraintsDescriptor {
  private static SNodePointer breakingNode_23ycph_a0a1a0a0a1a0b0a1a0 = new SNodePointer("r:2a176b2b-102e-4f37-9118-66136ec0d803(DeCypher.constraints)", "7750257802048567803");

  public RelationshipReference_Constraints() {
    super("DeCypher.structure.RelationshipReference");
  }

  @Override
  protected Map<String, ReferenceConstraintsDescriptor> getNotDefaultReferences() {
    Map<String, ReferenceConstraintsDescriptor> references = new HashMap();
    references.put("relationship", new BaseReferenceConstraintsDescriptor("relationship", this) {
      @Override
      public boolean hasOwnScopeProvider() {
        return true;
      }

      @Nullable
      @Override
      public ReferenceScopeProvider getScopeProvider() {
        return new BaseReferenceScopeProvider() {
          @Override
          public Object createSearchScopeOrListOfNodes(final IOperationContext operationContext, final ReferenceConstraintsContext _context) {
            SNode query = SNodeOperations.getAncestor(_context.getEnclosingNode(), "DeCypher.structure.Query", true, false);
            Iterable<SNode> availableRels = null;
            if (query != null && SLinkOperations.getTarget(query, "startClause", true) != null) {
              availableRels = ListSequence.fromList(SLinkOperations.getTargets(SLinkOperations.getTarget(query, "startClause", true), "terms", true)).where(new IWhereFilter<SNode>() {
                public boolean accept(SNode it) {
                  return SNodeOperations.isInstanceOf(it, "DeCypher.structure.RelationshipStartTerm");
                }
              }).select(new ISelector<SNode, SNode>() {
                public SNode select(SNode it) {
                  return SLinkOperations.getTarget(SNodeOperations.cast(it, "DeCypher.structure.RelationshipStartTerm"), "relationship", true);
                }
              });
            }
            return availableRels;
          }

          @Override
          public SNodePointer getSearchScopeValidatorNode() {
            return breakingNode_23ycph_a0a1a0a0a1a0b0a1a0;
          }
        };
      }
    });
    return references;
  }
}
